/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 * Error en que si ponen una palabra mala dentro de comentarios te muestra todo lo que esta dentro
 * Tabla no mostrar todos los tokens solo los identificadores
 * Faltan caracteres especiales
 */
package analisadorlexico3;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MABY
 */
public class JFrameAnalizador extends javax.swing.JFrame {

    File abreArchi;
    ArrayList<Tabla_Simbolos> _tabla_simbolos;
    ArrayList<Token> _tabla_tokens;
    Token _token;
    Tabla_Simbolos _Simbolos;
    String[] token = new String[100];
    String[] auxToken = new String[20];
    String[] reservadas = {"", "ENTONCES", "ESCRIBIR", "FIN", "HACER", "INICIO", "LEER", "MIENTRAS", "SI", "SINO"};
    String cabecera1[] = {"No.", " Token ", " Tipo"};
    String palabra = "", reservado = "", ruta = "";
    String[] valor = new String[500];
    int[] id = new int[100];
    int[] pos = new int[500];
    int i, j, k, n, m = 0, size = 0, linea = 0, orden = 1, estado = 0, opcion;

    /**
     * Creates new form JFrameAnalizador
     */
    public JFrameAnalizador() {
        initComponents();
        _tabla_simbolos = new ArrayList<>();
        _tabla_tokens = new ArrayList<>();
        for (int q = 0; q < reservadas.length; q++) {
            _Simbolos = new Tabla_Simbolos(q, reservadas[q], 2);
            _tabla_simbolos.add(_Simbolos);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        EPane = new javax.swing.JEditorPane();
        btnAgregarTexto = new javax.swing.JButton();
        btnAnLéxico = new javax.swing.JButton();
        btnMosTabla = new javax.swing.JButton();
        btnMosTokens = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(EPane);

        btnAgregarTexto.setText("Agregar");
        btnAgregarTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarTextoActionPerformed(evt);
            }
        });

        btnAnLéxico.setText("Analizador léxico");
        btnAnLéxico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnLéxicoActionPerformed(evt);
            }
        });

        btnMosTabla.setText("Mostrar Tabla");
        btnMosTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMosTablaActionPerformed(evt);
            }
        });

        btnMosTokens.setText("Mostrar Tokens");
        btnMosTokens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMosTokensActionPerformed(evt);
            }
        });

        tabla.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tabla);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAgregarTexto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAnLéxico)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnMosTabla))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(btnMosTokens)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarTexto)
                    .addComponent(btnAnLéxico)
                    .addComponent(btnMosTabla))
                .addGap(4, 4, 4)
                .addComponent(btnMosTokens)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarTextoActionPerformed
        String aux = "";
        String texto = "";
        try {
            //Llamamos al metodo que permite cargar la ventana del chooser
            JFileChooser file = new JFileChooser();
            file.setCurrentDirectory(new File("prueba"));
            file.showOpenDialog(this);
            //Abrimos el archivo seleccionado
            abreArchi = file.getSelectedFile();
            ruta = abreArchi.getPath();

            if (abreArchi != null) {
                FileReader archivo = new FileReader(abreArchi);
                BufferedReader lee = new BufferedReader(archivo);

                while ((aux = lee.readLine()) != null) {
                    texto += aux + "\n";
                }
                lee.close();
            }
        } catch (IOException ex) {
            Logger.getLogger(JFrameAnalizador.class.getName()).log(Level.SEVERE, null, ex);
        }
        EPane.setText(texto);
    }//GEN-LAST:event_btnAgregarTextoActionPerformed

    private void btnAnLéxicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnLéxicoActionPerformed
        k = 0;
        linea = 0;
        size = 0;
        orden = 1;
        estado = 0;
        try {
            File file3 = new File(ruta);
            FileInputStream file = new FileInputStream(file3);

            BufferedInputStream buff = new BufferedInputStream(file);
            int in = 0;
            do {
                in = buff.read();
                if (in != -1) {
                    if ((in >= 65 && in <= 90) || (in >= 97 && in <= 122)) {
                        if (estado == 0 || estado == 1) {
                            size++;
                            estado = 1;
                            palabra += (char) in;
                        } else if (estado == 7) {
                        } else {
                            estado = 8;
                        }
                    } else if (in == 40 || in == 41 || in == 44 || in == 59) {
                        if (estado == 0) {
                            estado = 9;
                            palabra += (char) in;
                        } else {
                            estado = 8;
                        }
                    } else if (in > 47 && in < 58) {
                        if (estado == 0 || estado == 2) {
                            size++;
                            estado = 2;
                            palabra += (char) in;
                        } else if (estado == 1) {
                            size++;
                            estado = 1;
                            palabra += (char) in;
                        } else if (estado == 7) {
                        } else {
                            estado = 8;
                        }
                    } else if (in == 95) {
                        if (estado == 0 || estado == 1) {
                            if (size != m) {
                                size++;
                                estado = 1;
                                palabra += (char) in;
                            } else {
                                estado = 8;
                                m++;
                            }

                        } else {
                            estado = 8;
                        }
                    } else if (in == 42 || in == 43 || in == 45 || in == 47) {
                        if (estado == 0) {
                            estado = 3;
                            palabra += (char) in;
                        } else if (estado == 7) {
                        } else {
                            estado = 8;
                        }
                    } else if (in == 60 || in == 62 || in == 38) {
                        if (estado == 0) {
                            estado = 4;
                            palabra += (char) in;
                        } else if (estado == 7) {
                        } else {
                            estado = 8;
                        }
                    } else if (in == 61) {
                        if (estado == 0 || estado == 4) {
                            estado = 4;
                            palabra += (char) in;
                        } else if (estado == 5) {
                            estado = 6;
                            palabra += (char) in;
                        } else if (estado == 7) {
                        } else {
                            estado = 8;
                        }
                    } else if (in == 58) {
                        if (estado == 0) {
                            estado = 5;
                            palabra += (char) in;
                        } else if (estado == 7) {
                        } else {
                            estado = 8;
                        }
                    } else if (in == 123) {
                        if (estado >= 1 || estado <= 6) {
                            estado = 7;
                        } else if (estado == 7) {
                        }
                    } else if (in == 125) {
                        if (estado == 7) {

                            estado = 0;
                        }
                    } else if (in == 9 || in == 32 || in == 10) {
                        if (in == 10) {
                            linea++;
                            if (estado == 7 && in == 125) {
                                estado = 0;
                            }
                        }

                        switch (estado) {
                            case 0:
                                estado = 0;
                                break;
                            case 1:
                                agregarIDoReservadas();
                                break;
                            case 2:
                                agregarNumero();
                                break;
                            case 3:
                                agregarOperadoresAricmeticos();
                                break;
                            case 4://OperadoresRelacionales
                                agregarOperadoresrelacionales();
                                break;
                            case 6://Operador de asignacion
                                agregarOperadorAsignacion();
                                break;
                            case 7:
                                //ESte estado entra cuando son comentarios
                                estado = 7;
                                m = 0;
                                break;
                            case 8:
                                System.out.println("Error en la línea " + linea + " con la palabra " + palabra);
                                palabra = "";
                                size = 0;
                                estado = 0;
                                m = 0;
                                break;
                            case 9://CaracterEspecial
                                agregarCaracterEspecial();
                                break;
//                            case 10:
//                                pos[k] = orden;
//                                id[k] = 8;
//                                token[k] = palabra;
//                                palabra = "";
//                                size = 0;
//                                estado = 0;
//                                orden++;
//                                k++;
//                                break;
                        }
                    }
                }

            } while (in != -1);

        } catch (IOException e) {
            System.out.println("Excpetion: " + e.getMessage());
        }
    }//GEN-LAST:event_btnAnLéxicoActionPerformed

    private void agregarIDoReservadas() {
        if (size > 8) {
            estado = 8;
        } else {

            valor[k] = "" + 3;
            pos[k] = orden;
            token[k] = palabra;
            for (i = 0; i < reservadas.length; i++) {
                if (palabra.equals(reservadas[i])) {
                    valor[k] = "" + 2;
                    break;
                }
            }

            if (valor[k].equals("3")) {
                boolean bandera = true;
                Iterator<Tabla_Simbolos> simboloSigui = _tabla_simbolos.iterator();
                while (simboloSigui.hasNext()) {
                    Tabla_Simbolos simbolo = simboloSigui.next();
                    if (palabra.equals(simbolo.getNombre())) {
                        bandera = false;
                        break;
                    } else {
                        bandera = true;
                    }
                }
                if (bandera) {
                    _Simbolos = new Tabla_Simbolos(_tabla_simbolos.size(), palabra, 3);
                    _tabla_simbolos.add(_Simbolos);
                }
            }

            Iterator<Tabla_Simbolos> simboloSigui = _tabla_simbolos.iterator();
            while (simboloSigui.hasNext()) {
                Tabla_Simbolos simbolo = simboloSigui.next();
                if (palabra.equals(simbolo.getNombre())) {
                    int val = simbolo.getPosicion();
                    _token = new Token(Integer.parseInt(valor[k]), "" + val, palabra);
                    _tabla_tokens.add(_token);
                    break;
                } else {

                }
            }

            palabra = "";
            size = 0;
            estado = 0;
            orden++;
            k++;
        }
    }

    private void agregarNumero() {
        if (size > 7) {
            estado = 8;
        } else {

            valor[k] = "" + 1;
            token[k] = palabra;

            _token = new Token(Integer.parseInt(valor[k]), palabra, "Numerico");
            _tabla_tokens.add(_token);

            palabra = "";
            size = 0;
            estado = 0;
            orden++;
            k++;
        }
    }

    private void agregarOperadoresAricmeticos() {

        valor[k] = "'" + palabra + "'";
        token[k] = palabra;
        _token = new Token(5, "" + palabra, "OperadorAritmetico");
        _tabla_tokens.add(_token);
        palabra = "";
        size = 0;
        estado = 0;
        orden++;
        k++;
    }

    private void agregarOperadoresrelacionales() {

        valor[k] = "'" + palabra + "'";
        token[k] = palabra;
        _token = new Token(6, "" + palabra, "OperadorRelacional");
        _tabla_tokens.add(_token);
        palabra = "";
        size = 0;
        estado = 0;
        orden++;
        k++;
    }

    private void agregarOperadorAsignacion() {

        valor[k] = "'" + palabra + "'";
        token[k] = palabra;
        _token = new Token(7, palabra, "OperadorAsignacion");
        _tabla_tokens.add(_token);
        palabra = "";
        size = 0;
        estado = 0;
        orden++;
        k++;
    }

    private void agregarCaracterEspecial() {

        id[k] = 7;
        token[k] = palabra;
        _token = new Token(4, palabra, "CaracterEspecial");
        _tabla_tokens.add(_token);
        palabra = "";
        size = 0;
        estado = 0;
        orden++;
        k++;
    }

    private void btnMosTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMosTablaActionPerformed
        n = 0;
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"Posicion", "Nombre", "Clase"});

//        System.out.println("Pos\t\tNombre\t\tClase");
        try {
            FileWriter file = new FileWriter("simbolos.txt", false);
            BufferedWriter buff = new BufferedWriter(file);
//            for (i = 1; i < reservadas.length; i++) {
//                model.addRow(new Object[]{i, reservadas[i], 2});
//                buff.write(i + "\t\t" + reservadas[i] + "\t\t" + 2 + "\n");
//            }
//
//            for (j = 0; j < k; j++) {
//                if (valor[j].equals("" + 3)) {
//                    String tokenAux = token[j];
//                    for (int g = 0; g < auxToken.length; g++) {
//                        if (!tokenAux.equals(auxToken[g]) && !auxToken[g].equals("null")) {
//                            auxToken[g] = tokenAux;
//                            n++;
//                            buff.write(i - 1 + n + "\t\t" + token[j] + "\t" + valor[j] + "\n");
//                            model.addRow(new Object[]{i - 1 + n, auxToken[j], valor[j]});
//                            break;
//                        }
//                    }
//
//                }
//            }
            Iterator<Tabla_Simbolos> simboloSigui = _tabla_simbolos.iterator();
            while (simboloSigui.hasNext()) {
                Tabla_Simbolos simbolo = simboloSigui.next();
                if (!simbolo.getNombre().equals("")) {
                    model.addRow(new Object[]{simbolo.getPosicion(), simbolo.getNombre(), simbolo.getClase()});
                    buff.write(simbolo.getPosicion() + "\t\t" + simbolo.getNombre() + "\t\t" + simbolo.getClase() + "\n");
                }
            }

            buff.close();
        } catch (IOException e) {
            System.out.println("Error " + e.toString());
        }

        try {
            FileReader file = new FileReader("simbolos.txt");
            BufferedReader buff = new BufferedReader(file);
            int in2;
            do {
                in2 = buff.read();
                if (in2 != -1) {
                    System.out.print((char) in2);
                }
            } while (in2 != -1);
            buff.close();
        } catch (IOException e) {
            System.out.println("Error " + e.toString());
        }

        tabla.setModel(model);
    }//GEN-LAST:event_btnMosTablaActionPerformed

    private void btnMosTokensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMosTokensActionPerformed
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"Clase", "Valor", "Nombre"});

//        for (i = 0; i <= k; i++) {
//            model.addRow(new Object[]{pos[i], token[i], valor[i]});
//            System.out.println(pos[i] + "\t\t" + token[i] + "\t\t" + valor[i]);
//        }
        Iterator<Token> tokenSigui = _tabla_tokens.iterator();
        while (tokenSigui.hasNext()) {
            Token token = tokenSigui.next();
            model.addRow(new Object[]{token.getClase(), token.getValor(), token.getNombre()});
        }

        tabla.setModel(model);
    }//GEN-LAST:event_btnMosTokensActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameAnalizador.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameAnalizador.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameAnalizador.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameAnalizador.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameAnalizador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane EPane;
    private javax.swing.JButton btnAgregarTexto;
    private javax.swing.JButton btnAnLéxico;
    private javax.swing.JButton btnMosTabla;
    private javax.swing.JButton btnMosTokens;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
}
